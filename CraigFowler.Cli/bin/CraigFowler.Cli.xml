<?xml version="1.0"?>
<doc>
    <assembly>
        <name>/home/craig/Projects/Arguments/CraigFowler.Cli/bin/CraigFowler.Cli</name>
    </assembly>
    <members>
        <member name="T:CraigFowler.Cli.IParameter">
            <summary>
                <para>A definition for a parameter that can be received on the commandline.</para>
            </summary>
            <remarks>
                <para>
            Each parameter must be defined and registered with an <see cref="T:CraigFowler.Cli.IParameterParser" /> before it can be used.
            The parameter processor must know which parts of the commandline to treat as parameters (and their arguments) and
            which to treat as other data on the commandline (such as actions, paths and the like).
            </para>
            </remarks>
        </member>
        <member name="P:CraigFowler.Cli.IParameter.InternalIdentifier">
            <summary>
                <para>
            Gets and sets a unique identifier for this parameter.  This value is used to identify this parameter within a
            collection of parameters.
            </para>
            </summary>
            <remarks>
                <para>It is recommended to use enumeration constants to identify parameters in a strongly-typed manner.</para>
                <para>
            This identifier will not be used on the commandline, rather it is only used on the internal API to work with
            the parameter from code.
            </para>
            </remarks>
        </member>
        <member name="P:CraigFowler.Cli.IParameter.LongIdentifiers">
            <summary>
                <para>
            Read-only.  Gets a collection of 'long-style' identifers for this parameter on the commandline, minus the
            platform-specific parts of the parameter.
            </para>
            </summary>
            <remarks>
                <example>
                    <para>
            For example, if a parameter is to be referenced (in a Unix-style parameter) as <c>--my-parameter</c> then a
            long identifier would be <c>my-parameter</c>.  This same parameter in a Windows-style might be
            <c>/my-parameter</c>.
            </para>
                </example>
                <para>
            Whilst it is not recommended to create many long identifiers for a parameter, it is possible (over time, as
            software changes) to have multiple identifiers for a single parameter.  This can occur as identifiers change
            meaning and/or become deprecated.  It is advised to only create one long-identifier for each parameter.
            </para>
            </remarks>
        </member>
        <member name="P:CraigFowler.Cli.IParameter.ShortIdentifiers">
            <summary>
                <para>
            Read-only.  Gets a collection of short (likely one-character) identifiers for this parameter on the
            commandline, minus the platform-specific parts of the parameter.
            </para>
            </summary>
            <remarks>
                <example>
                    <para>
            For example, if a parameter is to be referenced (in a Unix-style parameter) as <c>-m</c> then a
            short identifier would be <c>m</c>.  This same parameter in a Windows-style might be
            <c>/m</c>.
            </para>
                </example>
                <para>
            Whilst it is not recommended to create many short identifiers for a parameter, it is possible (over time, as
            software changes) to have multiple identifiers for a single parameter.  This can occur as identifiers change
            meaning and/or become deprecated.  It is advised to create at most one short-identifier for each parameter.
            </para>
                <para>
            Not every parameter requires a short identifier.  Short identifiers could be harder to remember and the
            available alphabet restricts their number somewhat.  If your application takes many possible parameters then
            it is probably best to give only the most commonly-used parameters short identifiers and leave the
            less-commonly-used parameters only with long identifiers.
            </para>
                <para>Short parameters are case-sensitive and so <c>a</c> is different from <c>A</c>.</para>
            </remarks>
        </member>
        <member name="P:CraigFowler.Cli.IParameter.Type">
            <summary>
                <para>Gets and sets the type of parameter that this represents.</para>
            </summary>
        </member>
        <member name="P:CraigFowler.Cli.IParameter.ValidForUse">
            <summary>
                <para>Read-only.  Gets whether or not this parameter is valid for usage.</para>
            </summary>
        </member>
        <member name="M:CraigFowler.Cli.IParameter.GetValue(System.String)">
            <summary>
                <para>Gets the value from this parameter.</para>
            </summary>
            <param name="rawValue">
            A <see cref="T:System.String" /> containing the raw value for this parameter.
            </param>
            <returns>
            A <see cref="T:System.Object" />, although implementing classes may provide a strongly-typed version of this
            method.
            </returns>
        </member>
        <member name="M:CraigFowler.Cli.IParameter.Equals(System.Object)">
            <summary>
                <para>
            Overridden from <see cref="T:System.Object" />.  Determines whether this parameter is equal to another.
            </para>
            </summary>
            <remarks>
                <para>
            Two parameters are considered equal if their <see cref="P:CraigFowler.Cli.IParameter.InternalIdentifier" />s are equal.
            </para>
            </remarks>
            <param name="obj">
            A <see cref="T:System.Object" /></param>
            <returns>
            A <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:CraigFowler.Cli.IParameter.GetHashCode">
            <summary>
            Overridden from <see cref="T:System.Object" />.  Gets a hash code for this parameter based on its
            <see cref="P:CraigFowler.Cli.IParameter.InternalIdentifier" />.
            </summary>
            <returns>
            A <see cref="T:System.Int32" /></returns>
        </member>
        <member name="T:CraigFowler.Cli.ParameterStyle">
            <summary>
                <para>Enumerates the various styles of creating and parsing commandline parameters.</para>
            </summary>
        </member>
        <member name="F:CraigFowler.Cli.ParameterStyle.Unix">
            <summary>
                <para>Unix-style parameters.</para>
            </summary>
            <remarks>
                <para>
            These parameters use single dashes to indicate short parameters and double-dashes to indicate long parameters.
            </para>
            </remarks>
        </member>
        <member name="F:CraigFowler.Cli.ParameterStyle.Windows">
            <summary>
                <para>Windows-style parameters.</para>
            </summary>
        </member>
        <member name="T:CraigFowler.Cli.Parameter`1">
            <summary>
                <para>Represents a single parameter.  This class is generic for the return value of the parameter.</para>
            </summary>
        </member>
        <member name="M:CraigFowler.Cli.Parameter`1.#ctor(System.Object,CraigFowler.Cli.ParameterType,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
                <para>
            Initialises this instance with an internal identifier, a parameter type and two optional collections of
            identifiers.
            </para>
            </summary>
            <param name="internalIdentifier">
            A <see cref="T:System.Object" /></param>
            <param name="type">
            A <see cref="T:CraigFowler.Cli.ParameterType" /></param>
            <param name="longIdentifiers">
            A collection of <see cref="T:System.String" /></param>
            <param name="shortIdentifiers">
            A collection of <see cref="T:System.String" /></param>
        </member>
        <member name="M:CraigFowler.Cli.Parameter`1.#ctor(System.Object,CraigFowler.Cli.ParameterType)">
            <summary>
                <para>Initialises this instance with an internal identifier and a parameter type.</para>
            </summary>
            <param name="internalIdentifier">
            A <see cref="T:System.Object" /></param>
            <param name="type">
            A <see cref="T:CraigFowler.Cli.ParameterType" /></param>
        </member>
        <member name="P:CraigFowler.Cli.Parameter`1.InternalIdentifier">
            <summary>
                <para>
            Gets and sets a unique identifier for this parameter.  This value is used to identify this parameter within a
            collection of parameters.
            </para>
            </summary>
            <remarks>
                <para>It is recommended to use enumeration constants to identify parameters in a strongly-typed manner.</para>
                <para>
            This identifier will not be used on the commandline, rather it is only used on the internal API to work with
            the parameter from code.
            </para>
            </remarks>
        </member>
        <member name="P:CraigFowler.Cli.Parameter`1.LongIdentifiers">
            <summary>
                <para>
            Read-only.  Gets a collection of 'long-style' identifers for this parameter on the commandline, minus the
            platform-specific parts of the parameter.
            </para>
            </summary>
            <remarks>
                <example>
                    <para>
            For example, if a parameter is to be referenced (in a Unix-style parameter) as <c>--my-parameter</c> then a
            long identifier would be <c>my-parameter</c>.  This same parameter in a Windows-style might be
            <c>/my-parameter</c>.
            </para>
                </example>
                <para>
            Whilst it is not recommended to create many long identifiers for a parameter, it is possible (over time, as
            software changes) to have multiple identifiers for a single parameter.  This can occur as identifiers change
            meaning and/or become deprecated.  It is advised to only create one long-identifier for each parameter.
            </para>
            </remarks>
        </member>
        <member name="P:CraigFowler.Cli.Parameter`1.ShortIdentifiers">
            <summary>
                <para>
            Read-only.  Gets a collection of short (likely one-character) identifiers for this parameter on the
            commandline, minus the platform-specific parts of the parameter.
            </para>
            </summary>
            <remarks>
                <example>
                    <para>
            For example, if a parameter is to be referenced (in a Unix-style parameter) as <c>-m</c> then a
            short identifier would be <c>m</c>.  This same parameter in a Windows-style might be
            <c>/m</c>.
            </para>
                </example>
                <para>
            Whilst it is not recommended to create many short identifiers for a parameter, it is possible (over time, as
            software changes) to have multiple identifiers for a single parameter.  This can occur as identifiers change
            meaning and/or become deprecated.  It is advised to create at most one short-identifier for each parameter.
            </para>
                <para>
            Not every parameter requires a short identifier.  Short identifiers could be harder to remember and the
            available alphabet restricts their number somewhat.  If your application takes many possible parameters then
            it is probably best to give only the most commonly-used parameters short identifiers and leave the
            less-commonly-used parameters only with long identifiers.
            </para>
                <para>Short parameters are case-sensitive and so <c>a</c> is different from <c>A</c>.</para>
            </remarks>
        </member>
        <member name="P:CraigFowler.Cli.Parameter`1.Type">
            <summary>
                <para>Gets and sets the type of parameter that this represents.</para>
            </summary>
        </member>
        <member name="P:CraigFowler.Cli.Parameter`1.ValidForUse">
            <summary>
                <para>Read-only.  Gets whether or not this parameter is valid for use.</para>
            </summary>
        </member>
        <member name="M:CraigFowler.Cli.Parameter`1.GetValue(System.String)">
            <summary>
                <para>Gets a value from this instance in a strongly-typed manner.</para>
            </summary>
            <param name="rawValue">
            A <see cref="T:System.String" /></param>
            <returns>
            A <see cref="T:`0" /></returns>
        </member>
        <member name="M:CraigFowler.Cli.Parameter`1.Equals(System.Object)">
            <summary>
                <para>
            Overridden, overloaded.  Determines whether this instance is equal to a given <paramref name="obj" />.
            </para>
            </summary>
            <param name="obj">
            A <see cref="T:System.Object" /></param>
            <returns>
            A <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:CraigFowler.Cli.Parameter`1.Equals(CraigFowler.Cli.Parameter{`0})">
            <summary>
                <para>Overloaded.  Determines whether or not this instance is equal to a given <paramref name="obj" />.</para>
            </summary>
            <param name="obj">
            A parameter
            </param>
            <returns>
            A <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:CraigFowler.Cli.Parameter`1.GetHashCode">
            <summary>
                <para>Overridden.  Gets a hash code for this instance.</para>
            </summary>
            <returns>
            A <see cref="T:System.Int32" /></returns>
        </member>
        <member name="T:CraigFowler.Cli.ParsedParameters">
            <summary>
                <para>
            Represents a collection of <see cref="T:CraigFowler.Cli.IParameter" />s that are present within a commandline string, indexed by
            their <see cref="T:System.Object" /> internal identifiers, <see cref="P:CraigFowler.Cli.IParameter.InternalIdentifier" />.
            </para>
            </summary>
        </member>
        <member name="M:CraigFowler.Cli.ParsedParameters.#ctor">
            <summary>
                <para>Default constructor initialises this instance with empty values.</para>
            </summary>
        </member>
        <member name="M:CraigFowler.Cli.ParsedParameters.#ctor(System.Collections.Generic.Dictionary{CraigFowler.Cli.IParameter,System.String},System.Collections.Generic.IList{System.String})">
            <summary>
                <para>
            Initialises this instance with a collection of parameters and raw <see cref="T:System.String" /> values as well as
            a collection of the <paramref name="remainingArgs" /> found on the commandline.
            </para>
            </summary>
            <param name="parametersAndValues">
            A dictionary of <see cref="T:CraigFowler.Cli.IParameter" /> and <see cref="T:System.String" /></param>
            <param name="remainingArgs">
            A collection of <see cref="T:System.String" /></param>
        </member>
        <member name="T:CraigFowler.Cli.ParsedParameters.ParameterValuePair">
            <summary>
                <para>Represents a parameter-and-value pair.</para>
            </summary>
        </member>
        <member name="M:CraigFowler.Cli.ParsedParameters.ParameterValuePair.#ctor(CraigFowler.Cli.IParameter,System.String)">
            <summary>
                <para>Initialises this instance with a parameter and a value.</para>
            </summary>
            <param name="param">
            A <see cref="T:CraigFowler.Cli.IParameter" /></param>
            <param name="val">
            A <see cref="T:System.String" /></param>
        </member>
        <member name="P:CraigFowler.Cli.ParsedParameters.ParameterValuePair.Parameter">
            <summary>
                <para>Gets and sets the <see cref="T:CraigFowler.Cli.IParameter" /> for this parameter/value pair.</para>
            </summary>
        </member>
        <member name="P:CraigFowler.Cli.ParsedParameters.ParameterValuePair.RawValue">
            <summary>
                <para>Gets and sets the <see cref="T:System.String" /> raw value for this parameter/value pair.</para>
            </summary>
        </member>
        <member name="P:CraigFowler.Cli.ParsedParameters.UnderlyingResults">
            <summary>
                <para>Read-only.  Gets the underlying results of the parsing process.</para>
            </summary>
        </member>
        <member name="M:CraigFowler.Cli.ParsedParameters.HasParameter(System.Object)">
            <summary>
                <para>Gets whether or not this instance contains the given parameter.</para>
            </summary>
            <param name="internalIdentifier">
            A <see cref="T:System.Object" /></param>
            <returns>
            A <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:CraigFowler.Cli.ParsedParameters.GetValue(System.Object)">
            <summary>
                <para>Overloaded.  Gets the value from a parameter that provided a value.</para>
            </summary>
            <param name="internalIdentifier">
            A <see cref="T:System.Object" /> that corresponds to the parameter's <see cref="P:CraigFowler.Cli.IParameter.InternalIdentifier" />.
            </param>
            <returns>
            A <see cref="T:System.Object" /> that contains the value from the parameter.
            </returns>
        </member>
        <member name="M:CraigFowler.Cli.ParsedParameters.GetValue``1(System.Object)">
            <summary>
                <para>Overloaded.  Gets the value from a parameter that provided a value.</para>
            </summary>
            <param name="internalIdentifier">
            A <see cref="T:System.Object" /> that corresponds to the parameter's <see cref="P:CraigFowler.Cli.IParameter.InternalIdentifier" />.
            </param>
            <returns>
            A value that contains the value from the parameter.
            </returns>
        </member>
        <member name="M:CraigFowler.Cli.ParsedParameters.GetRemainingArguments">
            <summary>
                <para>
            Gets the remaining commandline arguments that remain after all of the data recognised as
            registered parameters is parsed and removed.
            </para>
            </summary>
            <returns>
            A collection of <see cref="T:System.String" /></returns>
        </member>
        <member name="M:CraigFowler.Cli.ParsedParameters.StoreResults(System.Collections.Generic.Dictionary{CraigFowler.Cli.IParameter,System.String},System.Collections.Generic.IList{System.String})">
            <summary>
                <para>
            Resets the state of this instance to an empty state and then stores parameter information within it.
            </para>
            </summary>
            <param name="parametersAndValues">
            A dictionary of <see cref="T:CraigFowler.Cli.IParameter" /> and <see cref="T:System.String" /></param>
            <param name="remainingArgs">
            A collection of <see cref="T:System.String" /></param>
        </member>
        <member name="M:CraigFowler.Cli.ParsedParameters.StoreResult(CraigFowler.Cli.IParameter,System.String)">
            <summary>
                <para>
            Overloaded.  Stores a single parameter/value pair result in the underlying collection for this type.
            </para>
            </summary>
            <param name="parameter">
            A <see cref="T:CraigFowler.Cli.IParameter" /></param>
            <param name="rawValue">
            A <see cref="T:System.String" /></param>
        </member>
        <member name="M:CraigFowler.Cli.ParsedParameters.StoreResult(System.Collections.Generic.IList{System.String})">
            <summary>
                <para>
            Overloaded.  Stores the remaining arguments (after parameters are parsed) into this instance.
            </para>
            </summary>
            <param name="remainingArgs">
            A collection of <see cref="T:System.String" /></param>
        </member>
        <member name="M:CraigFowler.Cli.ParsedParameters.StoreResult(System.String)">
            <summary>
                <para>
            Overloaded.  Stores a single remaining argument (that is not part of a parameter) into this instance.
            </para>
            </summary>
            <param name="remainingArgument">
            A <see cref="T:System.String" /></param>
        </member>
        <member name="T:CraigFowler.Cli.ParameterType">
            <summary>
                <para>Enumerates the various types of commandline parameters.</para>
            </summary>
        </member>
        <member name="F:CraigFowler.Cli.ParameterType.NoValue">
            <summary>
                <para>
            A parameter that never takes an associated value; the parameter acts as a flag.  Only the presence of this
            parameter will be recorded, never any value.
            </para>
            </summary>
        </member>
        <member name="F:CraigFowler.Cli.ParameterType.ValueOptional">
            <summary>
                <para>
            The parameter has an optional value associated with it.  If the following item on the commandline is not a
            parameter definition then it will be interpreted as the value to this parameter.  If the following item does
            appear to be a parameter definition then it will be treated as such.
            </para>
            </summary>
        </member>
        <member name="F:CraigFowler.Cli.ParameterType.ValueRequired">
            <summary>
                <para>
            Similar to <see cref="F:CraigFowler.Cli.ParameterType.ValueOptional" /> but the following item on the commandline will be treated as a value
            to this parameter regardless of what it looks like.  If there is no following value then this will be treated
            as an error.
            </para>
            </summary>
        </member>
        <member name="T:CraigFowler.Cli.IParameterParser">
            <summary>
                <para>Interface for all commandline parameter processors.</para>
            </summary>
            <remarks>
                <para>
            There may be many types of parameter processors, each processing a different style of passing parameters.
            </para>
            </remarks>
        </member>
        <member name="P:CraigFowler.Cli.IParameterParser.Item(System.Object)">
            <summary>
                <para>
            Read-only.  Gets parameters from this instance by their <see cref="T:System.Object" /> internal identifiers.
            For adding/registering new parameters use <see cref="M:CraigFowler.Cli.IParameterParser.RegisterParameter(CraigFowler.Cli.IParameter)" /> instead.
            </para>
            </summary>
            <param name="internalIdentifier">
            A <see cref="T:System.Object" /></param>
        </member>
        <member name="P:CraigFowler.Cli.IParameterParser.ParameterCount">
            <summary>
                <para>Read-only.  Gets the count of registered parameters.</para>
            </summary>
        </member>
        <member name="P:CraigFowler.Cli.IParameterParser.Style">
            <summary>
                <para>Read-only.  Gets the parameter style(s) that this parameter parser instance can process.</para>
            </summary>
        </member>
        <member name="M:CraigFowler.Cli.IParameterParser.RegisterParameter(CraigFowler.Cli.IParameter)">
            <summary>
                <para>Overloaded.  Registers a new parameter into this instance.</para>
            </summary>
            <param name="parameter">
            An <see cref="T:CraigFowler.Cli.IParameter" /></param>
        </member>
        <member name="M:CraigFowler.Cli.IParameterParser.RegisterParameter``1(System.Object,CraigFowler.Cli.ParameterType,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
                <para>
            Overloaded.  Generic convenience method constructs a new <see cref="T:CraigFowler.Cli.IParameter" /> object and registers it into
            this instance.
            </para>
            </summary>
            <param name="internalIdentifier">
            A <see cref="T:System.Object" /> corresponding to <see cref="P:CraigFowler.Cli.IParameter.InternalIdentifier" /> for the
            newly-created parameter.
            </param>
            <param name="paramType">
            A <see cref="T:CraigFowler.Cli.ParameterType" /> corresponding to <see cref="P:CraigFowler.Cli.IParameter.Type" /> for the
            newly-created parameter.
            </param>
            <param name="longIdentifiers">
            A collection of <see cref="T:System.String" /> corresponding to <see cref="P:CraigFowler.Cli.IParameter.LongIdentifiers" /> for the
            newly-created parameter.
            </param>
            <param name="shortIdentifiers">
            A collection of <see cref="T:System.String" /> corresponding to <see cref="P:CraigFowler.Cli.IParameter.ShortIdentifiers" /> for the
            newly-created parameter.
            </param>
            <typeparam name="T">
            Designates the type of value that the newly-created <see cref="T:CraigFowler.Cli.IParameter" /> is intended to store.
            </typeparam>
        </member>
        <member name="M:CraigFowler.Cli.IParameterParser.RegisterParameters(System.Type)">
            <summary>
                <para>
            Alternative method of registering parameters.  Requires an enumeration that represents the available parameters
            and carries attributes that describes how they are used as parameters.
            </para>
            </summary>
            <param name="parameterEnumeration">
            A <see cref="T:System.Type" /></param>
        </member>
        <member name="M:CraigFowler.Cli.IParameterParser.HasParameter(System.Object)">
            <summary>
                <para>
            Gets whether or not an <see cref="T:CraigFowler.Cli.IParameter" /> has been registered with the given
            <paramref name="internalIdentifier" />.
            </para>
            </summary>
            <param name="internalIdentifier">
            A <see cref="T:System.Object" /></param>
            <returns>
            A <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:CraigFowler.Cli.IParameterParser.CanProcess(CraigFowler.Cli.ParameterStyle)">
            <summary>
                <para>Gets whether or not this instance can process parameters in the given <paramref name="style" />.</para>
            </summary>
            <param name="style">
            A <see cref="T:CraigFowler.Cli.ParameterStyle" /></param>
            <returns>
            A <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:CraigFowler.Cli.IParameterParser.Parse(System.Collections.Generic.IList{System.String})">
            <summary>
                <para>
            Overloaded.  Performs parsing on the raw command line and returns an object representing the results of the
            parsing.
            </para>
            </summary>
            <param name="rawCommandLine">
            A collection of <see cref="T:System.String" /> - the raw collection of string arguments received via the
            commandline.
            </param>
            <returns>
            A <see cref="T:CraigFowler.Cli.ParsedParameters" /></returns>
        </member>
        <member name="M:CraigFowler.Cli.IParameterParser.Parse(System.Collections.Generic.IList{System.String},CraigFowler.Cli.ParsedParameters@)">
            <summary>
                <para>
            Overloaded.  Performs parsing on the raw command line and returns an object representing the results of the
            parsing.  This overload stores the parameters in an existing output collection.
            </para>
            </summary>
            <param name="rawCommandLine">
            A collection of <see cref="T:System.String" /> - the raw collection of string arguments received via the
            commandline.
            </param>
            <param name="output">
            A <see cref="T:CraigFowler.Cli.ParsedParameters" /></param>
        </member>
        <member name="T:CraigFowler.Cli.ParameterParser">
            <summary>
                <para>Base class for all processor implementations.</para>
            </summary>
        </member>
        <member name="M:CraigFowler.Cli.ParameterParser.#ctor(CraigFowler.Cli.ParameterStyle)">
            <summary>
                <para>Default constructor initialises this instance with a given parameter style.</para>
            </summary>
            <param name="style">
            A <see cref="T:CraigFowler.Cli.ParameterStyle" /></param>
        </member>
        <member name="F:CraigFowler.Cli.ParameterParser.PermittedParameterTypes">
            <summary>
                <para>Read-only.  Gets a collection that represents the permitted return types for parameters.</para>
            </summary>
        </member>
        <member name="F:CraigFowler.Cli.ParameterParser.registeredParameters">
            <summary>
                <para>Exposes the underlying collection of registered parameters, indexed by their internal identifiers.</para>
            </summary>
        </member>
        <member name="P:CraigFowler.Cli.ParameterParser.Item(System.Object)">
            <summary>
                <para>
            Read-only.  Gets parameters from this instance by their <see cref="T:System.Object" /> internal identifiers.
            For adding/registering new parameters use <see cref="M:CraigFowler.Cli.ParameterParser.RegisterParameter(CraigFowler.Cli.IParameter)" /> instead.
            </para>
            </summary>
            <param name="internalIdentifier">
            A <see cref="T:System.Object" /></param>
        </member>
        <member name="P:CraigFowler.Cli.ParameterParser.ParameterCount">
            <summary>
                <para>Read-only.  Gets the count of registered parameters.</para>
            </summary>
        </member>
        <member name="P:CraigFowler.Cli.ParameterParser.Style">
            <summary>
                <para>Read-only.  Gets the style(s) of parameter that this processor instance is capable of parsing.</para>
            </summary>
        </member>
        <member name="M:CraigFowler.Cli.ParameterParser.RegisterParameter(CraigFowler.Cli.IParameter)">
            <summary>
                <para>Overloaded.  Registers a new parameter into this instance.</para>
            </summary>
            <param name="parameter">
            An <see cref="T:CraigFowler.Cli.IParameter" /></param>
        </member>
        <member name="M:CraigFowler.Cli.ParameterParser.RegisterParameter``1(System.Object,CraigFowler.Cli.ParameterType,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
                <para>
            Overloaded.  Generic convenience method constructs a new <see cref="T:CraigFowler.Cli.IParameter" /> object and registers it into
            this instance.
            </para>
            </summary>
            <param name="internalIdentifier">
            A <see cref="T:System.Object" /> corresponding to <see cref="P:CraigFowler.Cli.IParameter.InternalIdentifier" /> for the
            newly-created parameter.
            </param>
            <param name="paramType">
            A <see cref="T:CraigFowler.Cli.ParameterType" /> corresponding to <see cref="P:CraigFowler.Cli.IParameter.Type" /> for the
            newly-created parameter.
            </param>
            <param name="longIdentifiers">
            A collection of <see cref="T:System.String" /> corresponding to <see cref="P:CraigFowler.Cli.IParameter.LongIdentifiers" /> for the
            newly-created parameter.
            </param>
            <param name="shortIdentifiers">
            A collection of <see cref="T:System.String" /> corresponding to <see cref="P:CraigFowler.Cli.IParameter.ShortIdentifiers" /> for the
            newly-created parameter.
            </param>
            <typeparam name="T">
            Designates the type of value that the newly-created <see cref="T:CraigFowler.Cli.IParameter" /> is intended to store.
            </typeparam>
        </member>
        <member name="M:CraigFowler.Cli.ParameterParser.RegisterParameters(System.Type)">
            <summary>
                <para>
            Alternative method of registering parameters.  Requires an enumeration that represents the available parameters
            and carries attributes that describes how they are used as parameters.
            </para>
            </summary>
            <param name="parameterEnumeration">
            A <see cref="T:System.Type" /></param>
        </member>
        <member name="M:CraigFowler.Cli.ParameterParser.HasParameter(System.Object)">
            <summary>
                <para>
            Gets whether or not an <see cref="T:CraigFowler.Cli.IParameter" /> has been registered with the given
            <paramref name="internalIdentifier" />.
            </para>
            </summary>
            <param name="internalIdentifier">
            A <see cref="T:System.Object" /></param>
            <returns>
            A <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:CraigFowler.Cli.ParameterParser.CanProcess(CraigFowler.Cli.ParameterStyle)">
            <summary>
                <para>Gets whether or not this instance can process parameters in the given <paramref name="style" />.</para>
            </summary>
            <param name="style">
            A <see cref="T:CraigFowler.Cli.ParameterStyle" /></param>
            <returns>
            A <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:CraigFowler.Cli.ParameterParser.Parse(System.Collections.Generic.IList{System.String})">
            <summary>
                <para>
            Overloaded.  Performs parsing on the raw command line and returns an object representing the results of the
            parsing.
            </para>
            </summary>
            <param name="rawCommandLine">
            A collection of <see cref="T:System.String" /> - the raw collection of string arguments received via the
            commandline.
            </param>
            <returns>
            A <see cref="T:CraigFowler.Cli.ParsedParameters" /></returns>
        </member>
        <member name="M:CraigFowler.Cli.ParameterParser.Parse(System.Collections.Generic.IList{System.String},CraigFowler.Cli.ParsedParameters@)">
            <summary>
                <para>
            Overloaded.  Performs parsing on the raw command line and returns an object representing the results of the
            parsing.  This overload stores the parameters in an existing output collection.
            </para>
            </summary>
            <param name="rawCommandLine">
            A collection of <see cref="T:System.String" /> - the raw collection of string arguments received via the
            commandline.
            </param>
            <param name="output">
            A <see cref="T:CraigFowler.Cli.ParsedParameters" /></param>
        </member>
        <member name="M:CraigFowler.Cli.ParameterParser.Parse(System.Collections.Generic.IList{System.String},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{CraigFowler.Cli.IParameter}},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{CraigFowler.Cli.IParameter}},CraigFowler.Cli.ParsedParameters@)">
            <summary>
                <para>
            Overloaded.  Performs parsing on the raw command line and returns an object representing the results of the
            parsing.  This abstract method must be provided by implementing classes.
            </para>
            </summary>
            <param name="rawCommandLine">
            A collection of <see cref="T:System.String" /> - the raw collection of string arguments received via the
            commandline.
            </param>
            <param name="longAliases">
            A dictionary of <see cref="T:System.String" /> and a collection of <see cref="T:CraigFowler.Cli.IParameter" /></param>
            <param name="shortAliases">
            A dictionary of <see cref="T:System.String" /> and a collection of <see cref="T:CraigFowler.Cli.IParameter" /></param>
            <param name="output">
            A <see cref="T:CraigFowler.Cli.ParsedParameters" /></param>
        </member>
        <member name="M:CraigFowler.Cli.ParameterParser.RegisterParameter(System.Object,System.Type)">
            <summary>
                <para>
            Overloaded.  Registers a parameter using an enumeration value and the type of the enumeration it came from.
            </para>
            </summary>
            <param name="enumValue">
            A <see cref="T:System.Object" /></param>
            <param name="enumType">
            A <see cref="T:System.Type" /></param>
        </member>
        <member name="M:CraigFowler.Cli.ParameterParser.NormalisesParameterAliases(System.Collections.Generic.IEnumerable{CraigFowler.Cli.IParameter},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{CraigFowler.Cli.IParameter}}@,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{CraigFowler.Cli.IParameter}}@)">
            <summary>
                <para>
            Normalises the aliases/names of parameters by compiling two dictionaries of the long/short aliases that can
            be used to reach the parameters.
            </para>
            </summary>
            <param name="parameters">
            A collection of <see cref="T:CraigFowler.Cli.IParameter" /></param>
            <param name="longAliases">
            A dictionary of <see cref="T:System.String" /> and a collection of <see cref="T:CraigFowler.Cli.IParameter" /></param>
            <param name="shortAliases">
            A dictionary of <see cref="T:System.String" /> and a collection of <see cref="T:CraigFowler.Cli.IParameter" /></param>
        </member>
        <member name="M:CraigFowler.Cli.ParameterParser.IsPermittedParameterType(System.Type)">
            <summary>
                <para>Determines whether or not the <paramref name="paramType" /> is a permitted type.</para>
            </summary>
            <param name="paramType">
            A <see cref="T:System.Type" /></param>
            <returns>
            A <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="T:CraigFowler.Cli.ParameterAttribute">
            <summary>
                <para>
            Used to decorate an enumeration constant, where that constant represents a parameter that an application
            accepts.  This is the bare minimum attribute that must decorate an enumeration constant in order to use it as
            a parameter.
            </para>
            </summary>
        </member>
        <member name="M:CraigFowler.Cli.ParameterAttribute.#ctor">
            <summary>
                <para>Default constructor initialises this instance with default values.</para>
            </summary>
        </member>
        <member name="P:CraigFowler.Cli.ParameterAttribute.Type">
            <summary>
                <para>Gets and sets the type of parameter that the decorated enumeration constant represents.</para>
            </summary>
        </member>
        <member name="P:CraigFowler.Cli.ParameterAttribute.ValueType">
            <summary>
                <para>
            Gets and sets the return value type of the parameter that the decoration enumeration constant represents.
            </para>
            </summary>
        </member>
        <member name="M:CraigFowler.Cli.ParameterAttribute.ParameterFactory(System.Object)">
            <summary>
                <para>
            Factory method creates a new <see cref="T:CraigFowler.Cli.IParameter" /> from this attribute and the enumeration constant that
            it was decorating.
            </para>
            </summary>
            <param name="enumerationValue">
            A <see cref="T:System.Object" /></param>
            <returns>
            A <see cref="T:CraigFowler.Cli.IParameter" /></returns>
        </member>
        <member name="T:CraigFowler.Cli.ParameterLongNamesAttribute">
            <summary>
                <para>
            Used to decorate an enumeration constant, where that constant represents a parameter that an application
            accepts.  This attribute is used to identify "long names" for the parameter.  Most parameters have exactly one
            long name.
            </para>
            </summary>
        </member>
        <member name="M:CraigFowler.Cli.ParameterLongNamesAttribute.#ctor(System.String[])">
            <summary>
                <para>Initialises this instance with a collection of names.</para>
            </summary>
            <param name="names">
            A <see cref="T:System.String[]" /></param>
        </member>
        <member name="P:CraigFowler.Cli.ParameterLongNamesAttribute.Names">
            <summary>
                <para>Gets and sets a collection of the names for the parameter.</para>
            </summary>
        </member>
        <member name="T:CraigFowler.Cli.ParameterShortNamesAttribute">
            <summary>
                <para>
            Used to decorate an enumeration constant, where that constant represents a parameter that an application
            accepts.  This attribute is used to identify "short names" for the parameter.  Most parameters have either zero
            or one short name.  Short names are ideal for frequently-used parameters as a shortcut.
            </para>
            </summary>
        </member>
        <member name="M:CraigFowler.Cli.ParameterShortNamesAttribute.#ctor(System.String[])">
            <summary>
                <para>Initialises this instance with a collection of names.</para>
            </summary>
            <param name="names">
            A <see cref="T:System.String[]" /></param>
        </member>
        <member name="P:CraigFowler.Cli.ParameterShortNamesAttribute.Names">
            <summary>
                <para>Gets and sets a collection of the names for the parameter.</para>
            </summary>
        </member>
        <member name="T:CraigFowler.Cli.UnixParameters">
            <summary>
                <para>An implementation of <see cref="T:CraigFowler.Cli.ParameterParser" /> designed to work with Unix-style parameters.</para>
            </summary>
        </member>
        <member name="M:CraigFowler.Cli.UnixParameters.#ctor">
            <summary>
                <para>Initialises this instance.</para>
            </summary>
        </member>
        <member name="M:CraigFowler.Cli.UnixParameters.Parse(System.Collections.Generic.IList{System.String},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{CraigFowler.Cli.IParameter}},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{CraigFowler.Cli.IParameter}},CraigFowler.Cli.ParsedParameters@)">
            <summary>
                <para>
            Overridden.  Provides the actual paramater parsing mechanism, outputting results to the
            <paramref name="output" /> collection.
            </para>
            </summary>
            <param name="rawCommandLine">
            A collection of <see cref="T:System.String" /> - the raw collection of string arguments received via the
            commandline.
            </param>
            <param name="longAliases">
            A dictionary of <see cref="T:System.String" /> and a collection of <see cref="T:CraigFowler.Cli.IParameter" /></param>
            <param name="shortAliases">
            A dictionary of <see cref="T:System.String" /> and a collection of <see cref="T:CraigFowler.Cli.IParameter" /></param>
            <param name="output">
            A <see cref="T:CraigFowler.Cli.ParsedParameters" /></param>
            <returns>
            A <see cref="T:CraigFowler.Cli.ParsedParameters" /></returns>
        </member>
        <member name="M:CraigFowler.Cli.UnixParameters.GetMatchingParameters(System.String,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{CraigFowler.Cli.IParameter}},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{CraigFowler.Cli.IParameter}})">
            <summary>
                <para>
            Compares the <paramref name="argument" /> against the long and short aliases for parameters and (if a matching
            collection of parameters is found) returns that collection of parameters.
            </para>
            </summary>
            <param name="argument">
            A <see cref="T:System.String" /></param>
            <param name="longAliases">
            A dictionary of <see cref="T:System.String" /> and a collection of <see cref="T:CraigFowler.Cli.IParameter" /></param>
            <param name="shortAliases">
            A dictionary of <see cref="T:System.String" /> and a collection of <see cref="T:CraigFowler.Cli.IParameter" /></param>
            <returns>
            A collection of <see cref="T:CraigFowler.Cli.IParameter" /></returns>
        </member>
    </members>
</doc>
