<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      metal:use-macro="documents/macros/base-template/macros/document-structure">
<head>
<title metal:fill-slot="title">ZPT-Sharp Quick-start for ASP.NET MVC</title>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<base href="." />
<style>
@import url(static/css/default-styles.css);
</style>
</head>
<body>
<div class="page">
  <div class="region_header dummy">
    Header content is imported here
  </div>
  <div class="region_main">
    <div class="main_navigation">
      <div class="dummy">
        Main navigation is imported here
      </div>
    </div>
    <div class="region_content" metal:fill-slot="region_content">
      <h1>ZPT-Sharp Quick-start for ASP.NET MVC</h1>
      <p>
        The standard way of using ZPT-Sharp is as a custom <code>ViewEngine</code> for ASP.NET MVC.  ZPT-Sharp is
        compatible and tested with ASP.NET MVC version 2 and is likely to be compatible with higher versions as well.
        There are a few simple configurations that you should perform in order to start using ZPT to create your views:
      </p>
      <h2 id="steps">Steps to start using ZPT-Sharp right now</h2>
      <p>
        The steps below assume that you have a working ASP.NET MVC configuration set up already.
      </p>
      <ol>
        <li>
          Compile the assembly <code>CraigFowler.Web.ZPT.dll</code> and place it in either the <code>/bin</code>
          directory of your web application or into your <acronym title="Global Assembly Cache">GAC</acronym>.
        </li>
        <li>
          Register <code>CraigFowler.Web.ZPT.Mvc.ZptViewEngine</code> in your global.asax.cs and tell ZPT-Sharp to
          search assemblies for types that you are using as <strong>view classes</strong> (see optional step 4).  There
          is an <a href="quickstart-mvc.html#global-asax-sample">sample snippet of global.asax.cs</a> at the end of this
          guide to help you get this done.
        </li>
        <li>
          Write your controllers as normal with no modifications needed.  One note of worth is that anything you add to
          the <code>ViewData</code> collection within a controller will be made available to the template document as
          a <strong><acronym title="Template Attribute Language Expression Syntax">TALES</acronym> definition</strong>.
        </li>
        <li>
          Write your views using the <a href="quickstart-syntax.html" title="ZPT syntax quick-start">ZPT syntax</a>.
          The standard filename extension to save ZPT documents with is <code>.pt</code>.
        </li>
        <li>
          Your templates can optionally make use of
          <a href="view-classes.html" title="Guide to using ZPT view classes">view classes</a>, providing them with
          further functionality.  A view class could be thought of as similar to an ASP.NET code-behind class but in an
          MVC environment it is more limited in its scope.  View classes should be limited to reading information from
          your model and providing TALES variable definitions for the template to use.
        </li>
      </ol>
      <p>
        And with the above steps complete you are ready to go.  When you select a view using a controller, the ZPT-Sharp
        engine will load and render the relevant template document using any dynamic data you have given it.
      </p>
      <h2 id="global-asax-sample">Sample global.asax.cs snippet</h2>
      <p>
        This is a (heavily-annotated) snippet of the relevant code that you will need in your global.asax.cs.  Note that
        currently you must run the <code>ZptMetadata.RegisterDocumentClasses</code> method on any assemblies that
        contain types that you wish to use as
        <a href="view-classes.html" title="Guide to using ZPT view classes">view classes</a> (see optional step 4
        above).  You can instead pass <code>System.Type</code> to that method if you choose, registering each type
        individually.
      </p>
      <code class="block">// You will need:
// using CraigFowler.Web.ZPT;
// using CraigFowler.Web.ZPT.Mvc;

protected void Application_Start ()
{
  // You probably want to register some routes here
  
  /* Tell the ZPT engine about classes that implement
   * CraigFowler.Web.ZPT.IZptDocument
   * After https://github.com/craigfowler/ZPT-Sharp/issues/5
   * is resolved, this step will no longer be needed.
   */
  ZptMetadata.RegisterDocumentClasses(
    System.Reflection.Assembly.GetExecutingAssembly()
  );
  
  // Optionally clear all of the existing ViewEngines
  ViewEngines.Engines.Clear();
  
  // Register ZPT-Sharp as a ViewEngine for your web application
  ViewEngines.Engines.Add(new ZptViewEngine());
}</code>
    </div>
  </div>
  <div class="region_footer dummy">
    Footer content is imported here
  </div>
</div>
</body>
</html>