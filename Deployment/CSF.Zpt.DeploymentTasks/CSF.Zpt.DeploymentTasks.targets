<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <MSBuildExtensionPackPath>..\..\..\..\packages\MSBuild.Extension.Pack.1.8.0\build\net40\MSBuild.Extension.Pack.targets</MSBuildExtensionPackPath>
  </PropertyGroup>
  <Import Project="$(MSBuildExtensionPackPath)" />
  
  <!--  ************************************************************************
        ** ReadVersionNumber
  
        This task refers to a class within the DeploymentTasks library.
        It reads a formatted ini file and exposes the version information within
        that file.
        ************************************************************************
  -->
  <UsingTask TaskName="ReadVersionNumber" AssemblyFile="CSF.Zpt.DeploymentTasks.dll" />
  
  <!--  ************************************************************************
        ** IncrementBuildVersion
  
        This task opens a version information ini file and bumps (increments) the
        build number by one, then re-saves the file.
        ************************************************************************
  -->
  <UsingTask TaskName="IncrementBuildVersion" AssemblyFile="CSF.Zpt.DeploymentTasks.dll" />
  
  <!--  ************************************************************************
        ** RequireFilesOnPath
  
        This task receives a collection of files (executables).  For each of these
        it ensures that the file exists in the current PATH (environment variable).
        If any are not available then an error is raised.  If all are present then
        the task allows execution to continue.
        ************************************************************************
  -->
  <UsingTask TaskName="RequireFilesOnPath" AssemblyFile="CSF.Zpt.DeploymentTasks.dll" />
  
  <!--  ************************************************************************
        ** StampAssemblyInfo
  
        This target 'bakes in' data to an AssemblyInfo.cs file from a number
        of build properties.  The properties which refer to version are drawn from
        the shared version.ini file.  This way, the version info is not duplicated
        but managed in a single location.
        ************************************************************************
  -->
  <Target Name="StampAssemblyInfo">
    <CallTarget Targets="RestoreStubAssemblyInfo" />
    <ReadVersionNumber VersionFile="$(VersionIniPath)">
      <Output TaskParameter="FullVersionNumber" ItemName="FullVersion" />
      <Output TaskParameter="SemanticVersionNumber" ItemName="SemanticVersion" />
      <Output TaskParameter="BuildNumber" ItemName="BuildNumber" />
      <Output TaskParameter="InformationalVersion" ItemName="InformationalVersion" />
    </ReadVersionNumber>
    <ItemGroup>
      <AssemblyInfoFiles Include="$(AssemblyInfoFilename)" />
    </ItemGroup>
    <MSBuild.ExtensionPack.Framework.AssemblyInfo AssemblyInfoFiles="@(AssemblyInfoFiles)"
                                                  AssemblyVersion="@(SemanticVersion).0"
                                                  AssemblyFileVersion="@(FullVersion)"
                                                  AssemblyCompany="$(SolutionCompany)"
                                                  AssemblyCopyright="$(SolutionCopyright)"
                                                  AssemblyProduct="$(SolutionName)"
                                                  AssemblyConfiguration="$(ProjectConfiguration)"
                                                  AssemblyTitle="$(ProjectTitle)"
                                                  AssemblyDescription="$(ProjectDescription)" />
  </Target>
  
  <!--  ************************************************************************
        ** RestoreStubAssemblyInfo
  
        This target restores the AssemblyInfo.cs file back to the 'stub' which has
        no meaningful data.  This way the modifications to the file (as builds are
        performed) will not show up in source control.  The state of the file (from
        a build) is always transient.
        ************************************************************************
  -->
  <Target Name="RestoreStubAssemblyInfo">
    <ItemGroup>
      <StubAssemblyInfo Include="$(StubAssemblyInfoPath)" />
      <DestinationAssemblyInfo Include="$(AssemblyInfoFilename)" />
    </ItemGroup>
    <Copy SourceFiles="@(StubAssemblyInfo)" DestinationFiles="@(DestinationAssemblyInfo)" />
  </Target>
  
  <!--  ************************************************************************
        ** BumpBuildVersion
  
        This target executes the IncrementBuildVersion task to bump the build
        version number in the version.ini file.
        ************************************************************************
  -->
  <Target Name="BumpBuildVersion">
    <IncrementBuildVersion VersionFile="$(VersionIniPath)" />
  </Target>
  
  <!--  ************************************************************************
        ** DetectDeploymentDependencies
  
        This target builds as a list of the dependencies for the deployment process,
        and then uses the RequireFilesOnPath task to ensure that they are all
        available.
        ************************************************************************
  -->
  <Target Name="DetectDeploymentDependencies">
    <ItemGroup>
      <DetectedFiles Include="man" Condition="'$(OS)' == 'Unix'" />
      <DetectedFiles Include="man2html" Condition="'$(OS)' == 'Unix'" />
      <DetectedFiles Include="tidy" Condition="'$(OS)' == 'Unix'" />
      <DetectedFiles Include="doxygen" Condition="'$(OS)' == 'Unix'" />
      <DetectedFiles Include="pdflatex" Condition="'$(OS)' == 'Unix'" />
      <DetectedFiles Include="man.exe" Condition=" '$(OS)' == 'Windows_NT' " />
      <DetectedFiles Include="man2html.exe" Condition=" '$(OS)' == 'Windows_NT' " />
      <DetectedFiles Include="tidy.exe" Condition=" '$(OS)' == 'Windows_NT' " />
      <DetectedFiles Include="doxygen.exe" Condition=" '$(OS)' == 'Windows_NT' " />
      <DetectedFiles Include="pdflatex.exe" Condition=" '$(OS)' == 'Windows_NT' " />
    </ItemGroup>
    <RequireFilesOnPath Files="@(DetectedFiles)" />
  </Target>

</Project>