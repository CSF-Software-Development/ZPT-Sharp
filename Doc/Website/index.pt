<!doctype html>
<html tal:define="activePage string:introduction">
<head metal:use-macro="pages/Shared/general-page.pt/macros/common_document_head">
<meta charset="utf-8">
<title metal:fill-slot="document_title">Zen views for .NET: ZPT-Sharp</title>
<base href="." />
<style type="text/css" metal:fill-slot="document_styles">
@import url(css/introduction.css);
@import url(css/styles.css);
</style>
<style type="text/css">
@import url(css/dummy.css);
</style>
<script type="text/javascript" src="js/modernizr.min.js"></script>
<link rel="stylesheet" href="http://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.4.0/styles/default.min.css">
<script src="http://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.4.0/highlight.min.js"></script>
<script>
hljs.initHighlightingOnLoad();
</script>
</head>
<body metal:use-macro="pages/Shared/general-page.pt/macros/common_document_body" class="page_introduction">
<div class="content_wrapper">
  <header class="page_header" metal:fill-slot="page_header"></header>
  <div class="main_page_area">
    <nav>
      <h2>Navigation menu</h2>
      <ul class="active_introduction dummy">
        <li class="introduction"><a href=".">Introduction</a></li>
        <li class="other_page"><a href="dummy.html">Dummy page</a></li>
      </ul>
    </nav>
    <section class="main_page_content" metal:fill-slot="main_page_content">
      <header>
        <h1>
          Zen views for .NET
          <em>with ZPT-Sharp</em>
        </h1>
      </header>
      <section class="what_it_is">
        <header>
          <h2>HTML &amp; XML rendering engine</h2>
        </header>
        <ul>
          <li>
            An <a href="asp-net-mvc-view-engine.html">ASP.NET MVC ViewEngine</a>
          </li>
          <li>
            A
            <a href="page-rendering-api.html">
              page rendering <abbr title="Application Programming Interface">API</abbr>
            </a>
            for your own applications
          </li>
          <li>
            A <a href="command-line-renderer.html">command-line page-rendering application</a>
          </li>
        </ul>
      </section>
      <section class="advantages">
        <header>
          <h2>Advantages of <abbr title="Zope Page Templates">ZPT</abbr> views</h2>
        </header>
        <ul>
          <li>
            Simple yet powerful template syntax, easily understandable by designers with
            no programming (only HTML) knowledge
          </li>
          <li>
            Fits well with the <abbr title="Model, View, ViewModel">MVVM</abbr> paradigm
          </li>
          <li>
            View source files are valid
            <abbr title="Hypertext Markup Language">HTML</abbr> or
            <abbr title="Extensible Markup Language">XML</abbr> (your choice)
          </li>
          <li>
            View source files render offline in web browsers - thus may be worked upon by
            'pure' front-end designers without depending upon a functional back-end
          </li>
        </ul>
      </section>
      <section class="example">
        <header>
          <h2>A simple example</h2>
        </header>
        <h3>Câ™¯ model</h3>
        <p>Here are two simple interfaces which will be used to create a model:</p>
        <pre><code class="csharp">public interface IShop
{
  string Name { get; }
  IEnumerable&lt;IProduct&gt; Products { get; }
}

public interface IProduct
{
  string Name { get; }
  string RichHtmlDescription { get; }
  string GetFormattedPrice();
}</code></pre>
        <p>
          Now a simple MVC controller; assume that the <code>GetMyShop</code> method returns
          an instance of <code>IShop</code>.
        </p>
        <pre><code class="csharp">public ActionResult Index()
{
  IShop shop = GetMyShop();
  return View(shop);
}</code></pre>
        <h3>A ZPT Sharp view</h3>
        <p>
          Here is a simple source view, which could render the above model.  The presentation logic
          is contained within the attributes which use the <code>tal:</code> prefix.  All ZPT views
          use only attributes to represent their presentation logic.  Thus, they are a superset
          of an otherwise-valid HTML page.
        </p>
        <p>
          Notice that the model contains 'dummy' data which would display if the view were opened
          in a web browser without rendering through the ZPT backend.
        </p>
        <pre><code>&lt;html xmlns:tal="http://xml.zope.org/namespaces/tal"&gt;
&lt;head&gt;
&lt;title tal:content=&quot;string:Welcome to ${Model/Name}!&quot;&gt;Welcome to Dummy Shop!&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;You are visiting &lt;span tal:replace=&quot;Model/Name&quot;&gt;Dummy Shop&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;Here are our products:&lt;/p&gt;
&lt;ul&gt;
  &lt;li class=&quot;product_listing&quot; tal:repeat=&quot;product Model/Products&quot;&gt;
    &lt;h2 tal:content=&quot;product/Name&quot;&gt;Dummy product name&lt;/h2&gt;
    &lt;div class=&quot;description&quot; tal:content=&quot;structure product/RichHtmlDescription&quot;&gt;
      &lt;em&gt;Fake product description&lt;/em&gt; here, including &lt;strong&gt;HTML elements&lt;/strong&gt;.
    &lt;/div&gt;
    &lt;strong class=&quot;price&quot; tal:content=&quot;product/GetFormattedPrice&quot;&gt;&#165;50.45&lt;/strong&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
        <h3>Sample rendering</h3>
        <p>
          This is how the view above might render if it were put through the ZPT rendering engine
          backend.  The dummy values have been replaced with real data and the extra attributes
          have been removed, leaving only plain HTML.
        </p>
        <pre><code>&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Welcome to Veronica&#39;s Views!&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;You are visiting Veronica&#39;s Views&lt;/h1&gt;
&lt;p&gt;Here are our products:&lt;/p&gt;
&lt;ul&gt;
  &lt;li class=&quot;product_listing&quot;&gt;
    &lt;h2&gt;ASPX view&lt;/h2&gt;
    &lt;div class=&quot;description&quot;&gt;
      &lt;p&gt;&lt;em&gt;ASPX&lt;/em&gt; views are terrible to work with as an HTML/CSS designer,
      they include all sorts of troublesome markup, such as
      &lt;strong&gt;&amp;lt;% %&amp;gt;&lt;/strong&gt; notation.&lt;/p&gt;
      &lt;p&gt;&lt;em&gt;Razor&lt;/em&gt; is better but it&#39;s still not perfect.&lt;/p&gt;
    &lt;/div&gt;
    &lt;strong class=&quot;price&quot;&gt;$20.99&lt;/strong&gt;
  &lt;/li&gt;
  &lt;li class=&quot;product_listing&quot;&gt;
    &lt;h2&gt;ZPT view&lt;/h2&gt;
    &lt;div class=&quot;description&quot;&gt;
      &lt;p&gt;ZPT views are a pleasure to work with as a front-end designer, the source
      file renders in a plain web browser exactly as if it were a static page.&lt;/p&gt;
    &lt;/div&gt;
    &lt;strong class=&quot;price&quot;&gt;$2.50&lt;/strong&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
      </section>
    </section>
  </div>
</div>
<footer class="page_footer dummy">
  Dummy content
</footer>
</body>
</html>