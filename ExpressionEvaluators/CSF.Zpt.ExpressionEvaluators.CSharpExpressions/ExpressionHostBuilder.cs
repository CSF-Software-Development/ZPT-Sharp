// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace CSF.Zpt.ExpressionEvaluators.CSharpExpressions {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    internal partial class ExpressionHostBuilder : CSF.Zpt.ExpressionEvaluators.CSharpExpressions.TemplateWriterBase {
        
        public override string TransformText() {
            this.GenerationEnvironment = null;
            this.Write("\nusing System;\n\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.Namespace ));
            this.Write("\n{\n  public class ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.GetClassName() ));
            this.Write(" : CSF.Zpt.ExpressionEvaluators.CSharpFramework.IExpressionHost\n  {\n    #region fields\n    ");

foreach(var prop in Model.PropertyNames)
{
  
            this.Write("    private dynamic ");
            this.Write(this.ToStringHelper.ToStringWithCulture( prop ));
            this.Write(";");

}

            this.Write("\n    #endregion\n\n    #region methods\n\n    object CSF.Zpt.ExpressionEvaluators.CSharpFramework.IExpressionHost.Evaluate()\n    {\n      return ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.ExpressionText ));
            this.Write(";\n    }\n\n    void CSF.Zpt.ExpressionEvaluators.CSharpFramework.IExpressionHost.SetVariableValue(string name, object value)\n    {\n      switch(name)\n      {");

foreach(var prop in Model.PropertyNames)
{
  
            this.Write("      case \"");
            this.Write(this.ToStringHelper.ToStringWithCulture( prop ));
            this.Write("\":\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture( prop ));
            this.Write(" = value;\n        break;\n        ");

}

            this.Write("      default:\n        var message = String.Format(\"The variable name '{0}' is not valid for this expression.\", name);\n        throw new ArgumentException(message, \"name\");\n      }\n    }\n\n    #endregion\n  }\n}\n\n");
            return this.GenerationEnvironment.ToString();
        }
        
        public override void Initialize() {
            base.Initialize();
        }
    }
}
