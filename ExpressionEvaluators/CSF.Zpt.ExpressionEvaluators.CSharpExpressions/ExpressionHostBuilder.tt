<#@ template language="C#" linePragmas="false" visibility="internal" inherits="CSF.Zpt.ExpressionEvaluators.CSharpExpressions.TemplateWriterBase" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using System;

namespace <#= Model.Namespace #>
{
  public class <#= Model.GetClassName() #> : CSF.Zpt.ExpressionEvaluators.CSharpFramework.IExpressionHost
  {
    #region fields
    <#
foreach(var prop in Model.PropertyNames)
{
  #>
    private dynamic <#= prop #>;<#
}
#>

    #endregion

    #region methods

    object CSF.Zpt.ExpressionEvaluators.CSharpFramework.IExpressionHost.Evaluate()
    {
      return <#= Model.ExpressionText #>;
    }

    void CSF.Zpt.ExpressionEvaluators.CSharpFramework.IExpressionHost.SetVariableValue(string name, object value)
    {
      switch(name)
      {<#
foreach(var prop in Model.PropertyNames)
{
  #>
      case "<#= prop #>":
        <#= prop #> = value;
        break;
        <#
}
#>
      default:
        var message = String.Format("The variable name '{0}' is not valid for this expression.", name);
        throw new ArgumentException(message, nameof(name));
      }
    }

    #endregion
  }
}

