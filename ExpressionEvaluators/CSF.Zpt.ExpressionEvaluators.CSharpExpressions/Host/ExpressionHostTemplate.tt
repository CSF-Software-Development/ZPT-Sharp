<#@ template language="C#" linePragmas="false" visibility="internal" inherits="CSF.Zpt.ExpressionEvaluators.CSharpExpressions.TemplateWriterBase" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#
foreach(var ns in GetUsingNamespaces())
{
  #>
using <#= ns #>;
<#
}
foreach(var aliasedNs in GetAliasedUsingNamespaces())
{
  #>
using <#= aliasedNs.Item2 #> = <#= aliasedNs.Item1 #>;
<#
}
#>


namespace <#= GetClassNamespace() #>
{
  public class <#= GetClassName() #> : CSF.Zpt.ExpressionEvaluators.CSharpFramework.IExpressionHost
  {
    #region fields

<#
foreach(var prop in GetDynamicProperties())
{
  #>
    private dynamic <#= prop #>;
<#
}
foreach(var prop in GetTypedProperties())
{
  #>
    private <#= prop.Item2 #> <#= prop.Item1 #>;
<#
}
#>

    #endregion

    #region methods

    System.Object CSF.Zpt.ExpressionEvaluators.CSharpFramework.IExpressionHost.Evaluate()
    {
      return <#= GetExpressionText() #>;
    }

    void CSF.Zpt.ExpressionEvaluators.CSharpFramework.IExpressionHost.SetVariableValue(System.String name,
                                                                                       System.Object value)
    {
      switch(name)
      {
<#
foreach(var prop in GetDynamicProperties())
{
  #>
      case "<#= prop #>":
        <#= prop #> = value;
        break;
<#
}
foreach(var prop in GetTypedProperties())
{
  #>
      case "<#= prop.Item1 #>":
        <#= prop.Item1 #> = (<#= prop.Item2 #>) value;
        break;
<#
}
#>
      default:
        var message = System.String.Format("The variable name '{0}' is not valid for this expression.", name);
        throw new System.ArgumentException(message, "name");
      }
    }

    #endregion
  }
}
