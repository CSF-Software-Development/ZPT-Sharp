<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="/home/craig/projects/ZopePageTemplates/ZopePageTemplates.nunit" total="21" failures="5" not-run="0" date="2010-06-06" time="15:53:24">
  <environment nunit-version="2.4.7.0" clr-version="2.0.50727.1433" os-version="Unix 2.6.32.686" platform="Unix" cwd="/home/craig/Documents" machine-name="craig-laptop" user="craig" user-domain="craig-laptop" />
  <culture-info current-culture="en-GB" current-uiculture="en-GB" />
  <test-suite name="/home/craig/projects/ZopePageTemplates/ZopePageTemplates.nunit" success="False" time="0.458" asserts="0">
    <results>
      <test-suite name="/home/craig/projects/ZopePageTemplates/bin/Debug/Test.Parser.dll" success="False" time="0.420" asserts="0">
        <results>
          <test-suite name="Test" success="False" time="0.420" asserts="0">
            <results>
              <test-suite name="CraigFowler" success="False" time="0.420" asserts="0">
                <results>
                  <test-suite name="Web" success="False" time="0.420" asserts="0">
                    <results>
                      <test-suite name="ZPT" success="False" time="0.420" asserts="0">
                        <results>
                          <test-suite name="Mocks" success="True" time="0.041" asserts="0">
                            <results>
                              <test-suite name="TestMockObject" success="True" time="0.033" asserts="0">
                                <results>
                                  <test-case name="Test.CraigFowler.Web.ZPT.Mocks.TestMockObject.TestGetIndexer" executed="True" success="True" time="0.009" asserts="0">
                                    <categories>
                                      <category name="Information" />
                                    </categories>
                                  </test-case>
                                  <test-case name="Test.CraigFowler.Web.ZPT.Mocks.TestMockObject.TestGetMembers" executed="True" success="True" time="0.006" asserts="0">
                                    <categories>
                                      <category name="Information" />
                                    </categories>
                                  </test-case>
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="Tales" success="False" time="0.379" asserts="0">
                            <results>
                              <test-suite name="Expressions" success="True" time="0.091" asserts="0">
                                <results>
                                  <test-suite name="TestPathExpression" success="True" time="0.049" asserts="0">
                                    <results>
                                      <test-case name="Test.CraigFowler.Web.ZPT.Tales.Expressions.TestPathExpression.TestPathPieces" executed="True" success="True" time="0.016" asserts="2" />
                                    </results>
                                  </test-suite>
                                  <test-suite name="TestTalesExpression" success="True" time="0.042" asserts="0">
                                    <results>
                                      <test-case name="Test.CraigFowler.Web.ZPT.Tales.Expressions.TestTalesExpression.TestExpressionFactoryDefault" executed="True" success="True" time="0.001" asserts="2" />
                                      <test-case name="Test.CraigFowler.Web.ZPT.Tales.Expressions.TestTalesExpression.TestExpressionFactoryInverseBoolean" executed="True" success="True" time="0.000" asserts="2" />
                                      <test-case name="Test.CraigFowler.Web.ZPT.Tales.Expressions.TestTalesExpression.TestExpressionFactoryPath" executed="True" success="True" time="0.000" asserts="2" />
                                      <test-case name="Test.CraigFowler.Web.ZPT.Tales.Expressions.TestTalesExpression.TestExpressionFactoryString" executed="True" success="True" time="0.000" asserts="2" />
                                      <test-case name="Test.CraigFowler.Web.ZPT.Tales.Expressions.TestTalesExpression.TestInnerExpression" executed="True" success="True" time="0.002" asserts="6" />
                                      <test-case name="Test.CraigFowler.Web.ZPT.Tales.Expressions.TestTalesExpression.TextExpressionText" executed="True" success="True" time="0.000" asserts="3" />
                                      <test-case name="Test.CraigFowler.Web.ZPT.Tales.Expressions.TestTalesExpression.TextExpressionTextNoPrefix" executed="True" success="True" time="0.000" asserts="3" />
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                              <test-suite name="TalesIntegrationTests" success="False" time="0.091" asserts="0">
                                <categories>
                                  <category name="Integration" />
                                </categories>
                                <results>
                                  <test-case name="Test.CraigFowler.Web.ZPT.Tales.TalesIntegrationTests.TestAliasBeforeIndexer" executed="True" success="False" time="0.008" asserts="0">
                                    <failure>
                                      <message><![CDATA[System.FormatException : Could not evaluate any of the given paths.]]></message>
                                      <stack-trace><![CDATA[at CraigFowler.Web.ZPT.Tales.Expressions.PathExpression.GetValue () [0x00000]
at Test.CraigFowler.Web.ZPT.Tales.TalesIntegrationTests.TestAliasBeforeIndexer () [0x00000]
at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[],System.Exception&)
at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000]
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Test.CraigFowler.Web.ZPT.Tales.TalesIntegrationTests.TestAliasedMembersBeforeNormalMembers" executed="True" success="False" time="0.006" asserts="2">
                                    <failure>
                                      <message><![CDATA[  Test string has correct value
  String lengths are both 3. Strings differ at index 0.
  Expected: "bar"
  But was:  "foo"
  -----------^
]]></message>
                                      <stack-trace><![CDATA[at Test.CraigFowler.Web.ZPT.Tales.TalesIntegrationTests.TestAliasedMembersBeforeNormalMembers () [0x00000]
at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[],System.Exception&)
at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000]
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Test.CraigFowler.Web.ZPT.Tales.TalesIntegrationTests.TestDuplicateAlias" executed="True" success="False" time="0.001" asserts="0">
                                    <failure>
                                      <message><![CDATA[An unexpected exception type was thrown
Expected: CraigFowler.Web.ZPT.Tales.TalesException
 but was: System.FormatException : Could not evaluate any of the given paths.]]></message>
                                      <stack-trace><![CDATA[at CraigFowler.Web.ZPT.Tales.Expressions.PathExpression.GetValue () [0x00000]
at Test.CraigFowler.Web.ZPT.Tales.TalesIntegrationTests.TestDuplicateAlias () [0x00000]
at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[],System.Exception&)
at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000]
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Test.CraigFowler.Web.ZPT.Tales.TalesIntegrationTests.TestNormalMemberBeforeIndexer" executed="True" success="True" time="0.000" asserts="2" />
                                  <test-case name="Test.CraigFowler.Web.ZPT.Tales.TalesIntegrationTests.TestParsePathExpressionFromIndexer" executed="True" success="False" time="0.000" asserts="0">
                                    <failure>
                                      <message><![CDATA[System.FormatException : Could not evaluate any of the given paths.]]></message>
                                      <stack-trace><![CDATA[at CraigFowler.Web.ZPT.Tales.Expressions.PathExpression.GetValue () [0x00000]
at Test.CraigFowler.Web.ZPT.Tales.TalesIntegrationTests.TestParsePathExpressionFromIndexer () [0x00000]
at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[],System.Exception&)
at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000]
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Test.CraigFowler.Web.ZPT.Tales.TalesIntegrationTests.TestParseSimplePathExpression" executed="True" success="True" time="0.000" asserts="2" />
                                  <test-case name="Test.CraigFowler.Web.ZPT.Tales.TalesIntegrationTests.TestParseSimplePathExpressionUsingAlias" executed="True" success="False" time="0.000" asserts="0">
                                    <failure>
                                      <message><![CDATA[System.FormatException : Could not evaluate any of the given paths.]]></message>
                                      <stack-trace><![CDATA[at CraigFowler.Web.ZPT.Tales.Expressions.PathExpression.GetValue () [0x00000]
at Test.CraigFowler.Web.ZPT.Tales.TalesIntegrationTests.TestParseSimplePathExpressionUsingAlias () [0x00000]
at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[],System.Exception&)
at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000]
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                </results>
                              </test-suite>
                              <test-suite name="TestTalesContext" success="True" time="0.197" asserts="0">
                                <results>
                                  <test-case name="Test.CraigFowler.Web.ZPT.Tales.TestTalesContext.TestConstructor" executed="True" success="True" time="0.000" asserts="2" />
                                  <test-case name="Test.CraigFowler.Web.ZPT.Tales.TestTalesContext.TestCreateChildContext" executed="True" success="True" time="0.000" asserts="4" />
                                  <test-case name="Test.CraigFowler.Web.ZPT.Tales.TestTalesContext.TestCreateExpression" executed="True" success="True" time="0.001" asserts="6" />
                                  <test-case name="Test.CraigFowler.Web.ZPT.Tales.TestTalesContext.TestParsePathExpression" executed="True" success="True" time="0.000" asserts="2" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>