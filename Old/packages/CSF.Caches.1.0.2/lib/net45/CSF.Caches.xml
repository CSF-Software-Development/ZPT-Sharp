<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSF.Caches</name>
    </assembly>
    <members>
        <member name="T:CSF.Caches.ICache`2">
            <summary>
            Interface for a cache implementation, which caches instances of <typeparamref name="TValue" /> indexed by a
            <typeparamref name="TKey" />.
            </summary>
        </member>
        <member name="M:CSF.Caches.ICache`2.Add(`0,`1)">
            <summary>
            Adds an item to the cache.
            </summary>
            <remarks>
            <para>
            If an item already exists within the cache, identified by the given key, then the value is not added to the
            cache, and <c>false</c> is returned.
            </para>
            </remarks>
            <returns><c>true</c> if a new item was added to the cache; <c>false</c> if not.</returns>
            <param name="key">The key at which to store the value.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="M:CSF.Caches.ICache`2.Remove(`0)">
            <summary>
            Removes an item from the cache.
            </summary>
            <remarks>
            <para>
            If an item does not exist within the cache, identified by the given key, then nothing is removed and
            <c>false</c> is returned.
            </para>
            </remarks>
            <returns><c>true</c> if a an item was removed; <c>false</c> if not.</returns>
            <param name="key">The key at which to remove an item.</param>
        </member>
        <member name="M:CSF.Caches.ICache`2.Contains(`0)">
            <summary>
            Gets a value indicating whether the cache contains an item identified by the given key.
            </summary>
            <param name="key">The key at which to search for an item.</param>
        </member>
        <member name="M:CSF.Caches.ICache`2.TryGet(`0,`1@)">
            <summary>
            Attempts to get a value from the cache.
            </summary>
            <returns><c>true</c>, if a value was found in the cache, <c>false</c> otherwise.</returns>
            <param name="key">The key for which to retrieve a value.</param>
            <param name="value">Exposes the value retrieved from the cache.  The value of this parameter is undefined if no value was found.</param>
        </member>
        <member name="M:CSF.Caches.ICache`2.Get(`0)">
            <summary>
            Gets a value from the cache, raising an exception if no value is available.
            </summary>
            <exception cref="T:CSF.Caches.NotAvailableInCacheException">If the cache does not contain a value for the given key.</exception>
            <param name="key">The key at which to get a value.</param>
        </member>
        <member name="M:CSF.Caches.ICache`2.GetOrAdd(`0,System.Func{`1})">
            <summary>
            Attempts to get a value from the cache, executing a function to create a value (and add that to the cache) if
            one is not already contained.
            </summary>
            <returns>The cached value, or the newly-created/added one.</returns>
            <param name="key">The key for the value.</param>
            <param name="valueFactory">A delegate with which to create an instance of the value if it is required.</param>
        </member>
        <member name="M:CSF.Caches.ICache`2.GetOrAdd(`0,System.Func{`1},System.Boolean@)">
            <summary>
            Attempts to get a value from the cache, executing a function to create a value (and add that to the cache) if
            one is not already contained.
            </summary>
            <remarks>
            <para>
            The <paramref name="cacheHit"/> parameter will be set to <c>true</c> if the request was fulfilled from the
            cache, or <c>false</c> if the <paramref name="valueFactory"/> was invoked in order to create a value for the
            cache.
            </para>
            </remarks>
            <returns>The cached value, or the newly-created/added one.</returns>
            <param name="key">The key for the value.</param>
            <param name="valueFactory">A delegate with which to create an instance of the value if it is required.</param>
            <param name="cacheHit">Exposes a value indicating whether or not the result was a cache 'hit'.</param>
        </member>
        <member name="T:CSF.Caches.ThreadSafeCache`2">
            <summary>
            Implementation of <see cref="T:CSF.Caches.ICache`2"/> that is thread-safe and well-optimised for frequent reading.
            </summary>
        </member>
        <member name="P:CSF.Caches.ThreadSafeCache`2.Cache">
            <summary>
            Gets the underlying cache storage.
            </summary>
            <value>The cache.</value>
        </member>
        <member name="P:CSF.Caches.ThreadSafeCache`2.SyncRoot">
            <summary>
            Gets an object used for performing locking and concurrency control within this type.
            </summary>
            <value>The synchronisation root.</value>
        </member>
        <member name="M:CSF.Caches.ThreadSafeCache`2.Add(`0,`1)">
            <summary>
            Adds an item to the cache.
            </summary>
            <remarks>
            <para>
            If an item already exists within the cache, identified by the given key, then the value is not added to the
            cache, and <c>false</c> is returned.
            </para>
            </remarks>
            <returns><c>true</c> if a new item was added to the cache; <c>false</c> if not.</returns>
            <param name="key">The key at which to store the value.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="M:CSF.Caches.ThreadSafeCache`2.Remove(`0)">
            <summary>
            Removes an item from the cache.
            </summary>
            <remarks>
            <para>
            If an item does not exist within the cache, identified by the given key, then nothing is removed and
            <c>false</c> is returned.
            </para>
            </remarks>
            <returns><c>true</c> if a an item was removed; <c>false</c> if not.</returns>
            <param name="key">The key at which to remove an item.</param>
        </member>
        <member name="M:CSF.Caches.ThreadSafeCache`2.Contains(`0)">
            <summary>
            Gets a value indicating whether the cache contains an item identified by the given key.
            </summary>
            <param name="key">The key at which to search for an item.</param>
        </member>
        <member name="M:CSF.Caches.ThreadSafeCache`2.TryGet(`0,`1@)">
            <summary>
            Attempts to get a value from the cache.
            </summary>
            <returns><c>true</c>, if a value was found in the cache, <c>false</c> otherwise.</returns>
            <param name="key">The key for which to retrieve a value.</param>
            <param name="value">Exposes the value retrieved from the cache.  The value of this parameter is undefined if no value was found.</param>
        </member>
        <member name="M:CSF.Caches.ThreadSafeCache`2.Get(`0)">
            <summary>
            Gets a value from the cache, raising an exception if no value is available.
            </summary>
            <exception cref="T:CSF.Caches.NotAvailableInCacheException">If the cache does not contain a value for the given key.</exception>
            <param name="key">The key at which to get a value.</param>
        </member>
        <member name="M:CSF.Caches.ThreadSafeCache`2.GetOrAdd(`0,System.Func{`1})">
            <summary>
            Attempts to get a value from the cache, executing a function to create a value (and add that to the cache) if
            one is not already contained.
            </summary>
            <returns>The cached value, or the newly-created/added one.</returns>
            <param name="key">The key for the value.</param>
            <param name="valueFactory">A delegate with which to create an instance of the value if it is required.</param>
        </member>
        <member name="M:CSF.Caches.ThreadSafeCache`2.GetOrAdd(`0,System.Func{`1},System.Boolean@)">
            <summary>
            Attempts to get a value from the cache, executing a function to create a value (and add that to the cache) if
            one is not already contained.
            </summary>
            <remarks>
            <para>
            The <paramref name="cacheHit"/> parameter will be set to <c>true</c> if the request was fulfilled from the
            cache, or <c>false</c> if the <paramref name="valueFactory"/> was invoked in order to create a value for the
            cache.
            </para>
            </remarks>
            <returns>The cached value, or the newly-created/added one.</returns>
            <param name="key">The key for the value.</param>
            <param name="valueFactory">A delegate with which to create an instance of the value if it is required.</param>
            <param name="cacheHit">Exposes a value indicating whether or not the result was a cache 'hit'.</param>
        </member>
        <member name="M:CSF.Caches.ThreadSafeCache`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThreadSafeCache{TKey,TValue}"/> class.
            </summary>
        </member>
        <member name="T:CSF.Caches.NotAvailableInCacheException">
            <summary>
            Exception raised by an <see cref="T:ICache{TKey,TValue}"/> when a required value is not present in the cache.
            </summary>
        </member>
        <member name="M:CSF.Caches.NotAvailableInCacheException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NotAvailableInCacheException"/> class
            </summary>
        </member>
        <member name="M:CSF.Caches.NotAvailableInCacheException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NotAvailableInCacheException"/> class
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the exception. </param>
        </member>
        <member name="M:CSF.Caches.NotAvailableInCacheException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NotAvailableInCacheException"/> class
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the exception. </param>
            <param name="inner">The exception that is the cause of the current exception. </param>
        </member>
        <member name="M:CSF.Caches.NotAvailableInCacheException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NotAvailableInCacheException"/> class
            </summary>
            <param name="context">The contextual information about the source or destination.</param>
            <param name="info">The object that holds the serialized object data.</param>
        </member>
    </members>
</doc>
